/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import domain.*;
import java.awt.Color;
import java.net.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.text.*;
import network.ChatMessage;
import util.NetworkUtil;
import view.music.MusicFile;
import view.music.SoundEngine;

/**
 *
 * @author Patrick Zenh√§usern <pzenhaeu@hsr.ch>
 */
public class LobbyJFrame extends javax.swing.JFrame implements Observer {

    private final TetrisController tetrisController;
    private final PlayerListModel playerListModel;
    private final ChatController chatController;
    private SoundEngine soundEngine;
    private final PlayerListCellRenderer playerListCellRenderer;
    final static SimpleAttributeSet DEFAULT = new SimpleAttributeSet();
    final static SimpleAttributeSet BOLD = new SimpleAttributeSet();

    static {
        StyleConstants.setForeground(BOLD, Color.black);
        StyleConstants.setFontFamily(BOLD, "Helvetica");
        StyleConstants.setFontSize(BOLD, 12);
        StyleConstants.setBold(BOLD, true);

        StyleConstants.setForeground(DEFAULT, Color.black);
        StyleConstants.setFontFamily(DEFAULT, "Helvetica");
        StyleConstants.setFontSize(DEFAULT, 12);
    }

    LobbyJFrame(TetrisController tetrisController, final ChatController chatController, MainJFrame.GameMode gameMode) {
        this.tetrisController = tetrisController;
        this.chatController = chatController;
        this.playerListModel = new PlayerListModel(chatController);
        this.playerListCellRenderer = new PlayerListCellRenderer(chatController.getOwnSession().getId());

        initComponents();
        tetrisController.addObserver(this);
        chatController.addObserver(this);
        chatController.addObserver(playerListModel);
        switch (gameMode) {
            case SINGLE_PLAYER:
                tetrisController.startGame(computeRandomBlockSeed(), 0, false, 1);
                break;
            case MULTI_PLAYER_JOIN:
                lblServerIP.setText("");
                lblServerIPValue.setText("");
                btnStart.setEnabled(false);
                pnlSettings.setVisible(false);
                soundEngine = new SoundEngine();
                soundEngine.playBackgroundMusic(MusicFile.lobbyBackgroundMusic);
                break;
            case MULTI_PLAYER_HOST:
                lblServerIPValue.setText(NetworkUtil.getLocalIP());
                soundEngine = new SoundEngine();
                soundEngine.playBackgroundMusic(MusicFile.lobbyBackgroundMusic);
                break;
        }
    }

    private GameFieldJFrame createGameField() {
        List<SimulationStateAbstract> otherSimulations = new ArrayList<SimulationStateAbstract>();
        for (Integer sessionID : tetrisController.getSessionMap().keySet()) {
            if (sessionID != tetrisController.getLocalSessionID()) {
                otherSimulations.add(tetrisController.getSession(sessionID));
            }
        }
        SimulationStateAbstract localSimulation = tetrisController.getSession(tetrisController.getLocalSessionID());
        final GameFieldJFrame gameField = new GameFieldJFrame((InputSampler) tetrisController.getInputSampler(), localSimulation, otherSimulations);
        return gameField;
    }

    private void exit() {
        tetrisController.disconnectFromServer();
        System.exit(0);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code.
     * The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblServerIP = new javax.swing.JLabel();
        lblServerIPValue = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txpChat = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        txtMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstPlayers = new javax.swing.JList();
        pnlSettings = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        lblStartLevel = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        sprStartLevel = new JSpinner(new SpinnerNumberModel(1, 1, 15, 1));
        jPanel8 = new javax.swing.JPanel();
        lblNumberOfJokers = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        sprNumberOfJokersValue = new javax.swing.JSpinner();
        cbxRandomSeed = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        lblSeed = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        sprSeed = new javax.swing.JSpinner(new SpinnerNumberModel(1, Long.MIN_VALUE, Long.MAX_VALUE, 1));
        cbxIncludeSpecialBlocks = new javax.swing.JCheckBox();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jPanel5 = new javax.swing.JPanel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        btnStart = new javax.swing.JButton();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(750, 500));
        setMinimumSize(new java.awt.Dimension(750, 500));
        setPreferredSize(new java.awt.Dimension(750, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("<html><h3>ZeLaMoSe-Tetris - Lobby</h3></html>");
        jLabel1.setMaximumSize(new java.awt.Dimension(500, 37));
        jPanel1.add(jLabel1);
        jPanel1.add(filler1);

        lblServerIP.setText("Server-IP:");
        jPanel1.add(lblServerIP);

        lblServerIPValue.setText("<ServerIPValue>");
        jPanel1.add(lblServerIPValue);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jSplitPane1.setResizeWeight(1.0);
        jSplitPane1.setMaximumSize(new java.awt.Dimension(750, 500));
        jSplitPane1.setMinimumSize(new java.awt.Dimension(750, 500));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(750, 500));

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel2.setMaximumSize(new java.awt.Dimension(500, 500));
        jPanel2.setMinimumSize(new java.awt.Dimension(500, 500));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 500));
        jPanel2.setLayout(new java.awt.BorderLayout());

        txpChat.setEditable(false);
        txpChat.setFocusable(false);
        jScrollPane3.setViewportView(txpChat);

        jPanel2.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        txtMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMessageActionPerformed(evt);
            }
        });
        jPanel4.add(txtMessage, java.awt.BorderLayout.CENTER);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });
        jPanel4.add(btnSend, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel4, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel3.setMaximumSize(new java.awt.Dimension(250, 500));
        jPanel3.setMinimumSize(new java.awt.Dimension(250, 10));
        jPanel3.setPreferredSize(new java.awt.Dimension(250, 10));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Players"));
        jPanel9.setAlignmentX(0.0F);
        jPanel9.setAlignmentY(0.0F);
        jPanel9.setMaximumSize(new java.awt.Dimension(250, 250));
        jPanel9.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setAlignmentX(0.0F);
        jScrollPane2.setAlignmentY(0.0F);

        lstPlayers.setModel(playerListModel);
        lstPlayers.setAlignmentX(0.0F);
        lstPlayers.setAlignmentY(0.0F);
        lstPlayers.setCellRenderer(playerListCellRenderer);
        jScrollPane2.setViewportView(lstPlayers);

        jPanel9.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel9);

        pnlSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        pnlSettings.setAlignmentX(0.0F);
        pnlSettings.setAlignmentY(0.0F);
        pnlSettings.setMaximumSize(new java.awt.Dimension(250, 132));
        pnlSettings.setMinimumSize(new java.awt.Dimension(250, 132));
        pnlSettings.setPreferredSize(new java.awt.Dimension(250, 132));
        pnlSettings.setLayout(new javax.swing.BoxLayout(pnlSettings, javax.swing.BoxLayout.Y_AXIS));

        jPanel6.setAlignmentX(0.0F);
        jPanel6.setAlignmentY(0.0F);
        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        lblStartLevel.setText("Start at Level:");
        jPanel6.add(lblStartLevel);
        jPanel6.add(filler5);

        sprStartLevel.setModel(new javax.swing.SpinnerNumberModel(1, 1, 15, 1));
        sprStartLevel.setMaximumSize(new java.awt.Dimension(100, 21));
        sprStartLevel.setMinimumSize(new java.awt.Dimension(100, 21));
        sprStartLevel.setPreferredSize(new java.awt.Dimension(100, 21));
        jPanel6.add(sprStartLevel);

        pnlSettings.add(jPanel6);

        jPanel8.setAlignmentX(0.0F);
        jPanel8.setAlignmentY(0.0F);
        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.LINE_AXIS));

        lblNumberOfJokers.setText("Number of Jokers:");
        jPanel8.add(lblNumberOfJokers);
        jPanel8.add(filler3);

        sprNumberOfJokersValue.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        sprNumberOfJokersValue.setMaximumSize(new java.awt.Dimension(100, 21));
        sprNumberOfJokersValue.setMinimumSize(new java.awt.Dimension(100, 21));
        sprNumberOfJokersValue.setPreferredSize(new java.awt.Dimension(100, 21));
        jPanel8.add(sprNumberOfJokersValue);
        JFormattedTextField txt = ((JSpinner.NumberEditor) sprNumberOfJokersValue.getEditor()).getTextField();
        ((NumberFormatter) txt.getFormatter()).setAllowsInvalid(false);
        ((NumberFormatter) txt.getFormatter()).setMinimum(0);

        pnlSettings.add(jPanel8);

        cbxRandomSeed.setSelected(true);
        cbxRandomSeed.setText("Random Seed");
        cbxRandomSeed.setAlignmentY(0.0F);
        cbxRandomSeed.setMaximumSize(new java.awt.Dimension(200, 20));
        cbxRandomSeed.setMinimumSize(new java.awt.Dimension(91, 20));
        cbxRandomSeed.setPreferredSize(new java.awt.Dimension(100, 20));
        cbxRandomSeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRandomSeedActionPerformed(evt);
            }
        });
        pnlSettings.add(cbxRandomSeed);

        jPanel7.setAlignmentX(0.0F);
        jPanel7.setAlignmentY(0.0F);
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.LINE_AXIS));

        lblSeed.setText("Seed:");
        lblSeed.setEnabled(false);
        jPanel7.add(lblSeed);
        jPanel7.add(filler4);

        sprSeed.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), Long.valueOf(0L), null, Long.valueOf(1L)));
        sprSeed.setEnabled(false);
        sprSeed.setMaximumSize(new java.awt.Dimension(100, 21));
        sprSeed.setMinimumSize(new java.awt.Dimension(100, 21));
        sprSeed.setPreferredSize(new java.awt.Dimension(100, 21));
        jPanel7.add(sprSeed);

        pnlSettings.add(jPanel7);

        cbxIncludeSpecialBlocks.setSelected(true);
        cbxIncludeSpecialBlocks.setText("Include Special Blocks");
        cbxIncludeSpecialBlocks.setAlignmentY(0.0F);
        cbxIncludeSpecialBlocks.setMaximumSize(new java.awt.Dimension(200, 21));
        cbxIncludeSpecialBlocks.setMinimumSize(new java.awt.Dimension(129, 21));
        cbxIncludeSpecialBlocks.setPreferredSize(new java.awt.Dimension(129, 21));
        pnlSettings.add(cbxIncludeSpecialBlocks);

        jPanel3.add(pnlSettings);
        jPanel3.add(filler2);

        jPanel5.setAlignmentX(0.0F);
        jPanel5.setAlignmentY(0.0F);
        jPanel5.setMaximumSize(new java.awt.Dimension(32910, 23));
        jPanel5.setPreferredSize(new java.awt.Dimension(258, 23));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));
        jPanel5.add(filler6);

        btnStart.setText("Start Game");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        jPanel5.add(btnStart);
        jPanel5.add(filler7);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        jPanel5.add(btnExit);

        jPanel3.add(jPanel5);

        jSplitPane1.setRightComponent(jPanel3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
      exit();
  }//GEN-LAST:event_btnExitActionPerformed

  private void txtMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMessageActionPerformed
      btnSendActionPerformed(evt);
  }//GEN-LAST:event_txtMessageActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        btnStart.setEnabled(false);
        long seed;
        if (cbxRandomSeed.isSelected()) {
            seed = computeRandomBlockSeed();
        } else {
            seed = (Long) sprSeed.getValue();
        }
        tetrisController.startGame(seed, (Integer) sprNumberOfJokersValue.getValue(), cbxIncludeSpecialBlocks.isSelected(), (Integer) sprStartLevel.getValue());
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (!txtMessage.getText().isEmpty()) {
            chatController.sendChatMessage(txtMessage.getText());
            txtMessage.setText("");
        }

    }//GEN-LAST:event_btnSendActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exit();
    }//GEN-LAST:event_formWindowClosing

    private void cbxRandomSeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRandomSeedActionPerformed
        if (cbxRandomSeed.isSelected()) {
            lblSeed.setEnabled(false);
            sprSeed.setEnabled(false);
        } else {
            lblSeed.setEnabled(true);
            sprSeed.setEnabled(true);
        }
    }//GEN-LAST:event_cbxRandomSeedActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnStart;
    private javax.swing.JCheckBox cbxIncludeSpecialBlocks;
    private javax.swing.JCheckBox cbxRandomSeed;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblNumberOfJokers;
    private javax.swing.JLabel lblSeed;
    private javax.swing.JLabel lblServerIP;
    private javax.swing.JLabel lblServerIPValue;
    private javax.swing.JLabel lblStartLevel;
    private javax.swing.JList lstPlayers;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JSpinner sprNumberOfJokersValue;
    private javax.swing.JSpinner sprSeed;
    private javax.swing.JSpinner sprStartLevel;
    private javax.swing.JTextPane txpChat;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object o1) {
        TetrisController.UpdateType type = (TetrisController.UpdateType) o1;

        switch (type) {
            case INIT_SIGNAL:
                chatController.deleteObserver(this);
                chatController.deleteObserver(playerListModel);
                chatController.tearDown();
                tetrisController.deleteObserver(this);
                final GameFieldJFrame gameField = createGameField();

                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        gameField.setVisible(true);
                        if (soundEngine != null) {
                            soundEngine.stopBackGroundMusic(MusicFile.lobbyBackgroundMusic);
                        }
                        dispose();
                    }
                });
                break;
            case EXCEPTION_THROWN:
                break;
            case CHAT_MESSAGE_RECEIVED:
                writeChatMessage(chatController.getChatMessage());
                break;
            case SESSION_ADDED:
                writeServerMessage(chatController.getAddedSession().getNickname() + " enters");
                break;
            case SESSION_REMOVED:
                writeServerMessage(chatController.getRemovedSession().getNickname() + " has left");
                break;
        }
    }

    private void writeChatMessage(final ChatMessage chatMessage) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                SimpleAttributeSet playerFont = new SimpleAttributeSet(BOLD);
                StyleConstants.setForeground(playerFont, playerListCellRenderer.getPlayerColor(chatMessage.getSender().getId()));
                appendText(chatMessage.getSender().getNickname() + ": ", playerFont);
                appendText(chatMessage.getMessage() + '\n', DEFAULT);
                scrollToNewLine();
            }
        });
    }

    private void writeServerMessage(final String message) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                appendText(message + '\n', DEFAULT);
                scrollToNewLine();
            }
        });
    }

    private void appendText(final String text, final AttributeSet set) {
        try {
            txpChat.getDocument().insertString(txpChat.getDocument().getLength(), text, set);
        } catch (BadLocationException ex) {
            Logger.getLogger(LobbyJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void scrollToNewLine() {
        txpChat.setCaretPosition(txpChat.getDocument().getLength());
    }

    private long computeRandomBlockSeed() {
        return System.currentTimeMillis();
    }
}
