package view;

import domain.*;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import network.GameParams;
import sun.swing.SwingUtilities2;

/**
 *
 * @author Patrick Zenh√§usern <pzenhaeu@hsr.ch>
 */
public class GameFieldJFrame extends javax.swing.JFrame {

    private TetrisController tetrisController;

    public GameFieldJFrame(TetrisController tetrisController) {
        initComponents();
        this.tetrisController = tetrisController;

        ownGameFieldJPanel2.setInputSampler((InputSampler) tetrisController.getInputSampler());
        ownGameFieldJPanel2.initRenderer(tetrisController.getSession(tetrisController.getLocalSessionID()));
        for (Integer sessionID : tetrisController.getSessionMap().keySet()) {
            if (sessionID != tetrisController.getLocalSessionID()) {
                SimulationStateAbstract gameEngine = tetrisController.getSession(sessionID);
                OtherGameFieldJPanel panel = new OtherGameFieldJPanel(gameEngine.getNickName(), gameEngine);
                pnlEnemyAreas.add(panel);
                gameEngine.addObserver(panel);
            }
        }
    }

    public static void main(String[] args) throws ClassNotFoundException, IOException {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            FileInputStream fis = new FileInputStream(file);
            ObjectInputStream in = new ObjectInputStream(fis);
            ReplayData replayData = (ReplayData) in.readObject();
            in.close();

            SimulationController simulationController = new SimulationController();
            final ReplayController replayController = new ReplayController(replayData, simulationController);

            GameParams params = replayData.getGameParams();
            GameEngine ownGameEngine = new GameEngine(replayData.getOwnSessionId(), params.getBlockQueueSeed(), params.isIncludeSpecialBlocks(), params.getNbrOfJokers());
            List<SimulationStateAbstract> otherEngines = new ArrayList<SimulationStateAbstract>();
            simulationController.addSession(replayData.getOwnSessionId(), replayData.getSessionList().get(replayData.getOwnSessionId()), ownGameEngine);

            for (Map.Entry<Integer, String> session : replayData.getSessionList().entrySet()) {
                if (session.getKey() != replayData.getOwnSessionId()) {
                    GameEngine gameEngine = new GameEngine(session.getKey(), params.getBlockQueueSeed(), params.isIncludeSpecialBlocks(), params.getNbrOfJokers());
                    otherEngines.add(gameEngine);
                    simulationController.addSession(session.getKey(), session.getValue(), gameEngine);
                }
            }
            final GameFieldJFrame gameFieldJFrame = new GameFieldJFrame(new InputSampler() {

                @Override
                public boolean dispatchKeyEvent(KeyEvent e) {
                    return false;
                }
            }, ownGameEngine, otherEngines);

            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    gameFieldJFrame.setVisible(true);
                    replayController.run();
                }
            });
        }
    }

    public GameFieldJFrame(InputSampler is, SimulationStateAbstract mainSimulation, List<SimulationStateAbstract> otherSimulations) {
        initComponents();
        ownGameFieldJPanel2.setInputSampler(is);
        ownGameFieldJPanel2.initRenderer(mainSimulation);

        for (SimulationStateAbstract gameEngine : otherSimulations) {
            OtherGameFieldJPanel panel = new OtherGameFieldJPanel((gameEngine).getNickName(), gameEngine);
            pnlEnemyAreas.add(panel);
            gameEngine.addObserver(panel);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code.
     * The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ownGameFieldJPanel2 = new view.OwnGameFieldJPanel();
        pnlEnemyAreas = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlEnemyAreas.setLayout(new javax.swing.BoxLayout(pnlEnemyAreas, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ownGameFieldJPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlEnemyAreas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(354, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ownGameFieldJPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 46, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlEnemyAreas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (tetrisController != null) {
            tetrisController.abortGame();
            switch (JOptionPane.showConfirmDialog(this, "Do you want to save the Replay?", "Save Replay?", JOptionPane.YES_NO_OPTION)) {
                case JOptionPane.YES_OPTION:
                    JFileChooser fc = new JFileChooser();
                    fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                    if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        tetrisController.saveReplayData(file.getAbsolutePath());
                    }

                    break;
                case JOptionPane.NO_OPTION:
                    break;
            }
        }
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private view.OwnGameFieldJPanel ownGameFieldJPanel2;
    private javax.swing.JPanel pnlEnemyAreas;
    // End of variables declaration//GEN-END:variables

    public OwnGameFieldJPanel getMainPanel() {
        return ownGameFieldJPanel2;
    }
}
