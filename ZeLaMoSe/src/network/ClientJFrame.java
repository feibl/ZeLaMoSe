/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package network;

import com.jogamp.newt.event.KeyEvent;
import domain.InputSampler;
import domain.Step;
import domain.StepGenerator;
import domain.interfaces.StepProducerInterface;
import domain.actions.Action;
import java.awt.event.KeyAdapter;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;
import network.NetworkHandler.UpdateType;

/**
 *
 * @author Fabian Senn <fsenn@hsr.ch>
 */
public class ClientJFrame extends javax.swing.JFrame implements Observer {

   private GameServer gameServer;
   private NetworkHandler networkHandler;
   private SessionInformation ownSession;
   private List<SessionInformation> sessionList = new ArrayList<SessionInformation>();
   private DefaultListModel model = new DefaultListModel();
   private InputSampler inputSampler = new InputSampler();
   private StepGenerator stepGenerator;

   /**
    * Creates new form ClientJFrame
    */
   public ClientJFrame() {
      initComponents();
   }

   public ClientJFrame(GameServer gameServer, NetworkHandler networkHandler, SessionInformation ownSession, List<SessionInformation> sessionList) {
      this.sessionList = sessionList;
      this.ownSession = ownSession;
      this.gameServer = gameServer;
      this.networkHandler = networkHandler;
      initComponents();
      for (SessionInformation session : sessionList) {
         model.addElement(session.getNickname());
      }
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code.
    * The content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        startButton = new javax.swing.JToggleButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        chatArea.setColumns(20);
        chatArea.setEditable(false);
        chatArea.setRows(5);
        jScrollPane1.setViewportView(chatArea);

        sendButton.setLabel("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        startButton.setLabel("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jList1.setModel(model);
        jList1.setFocusable(false);
        jScrollPane3.setViewportView(jList1);

        jLabel1.setText("Playerlist:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
      // TODO add your handling code here:
      networkHandler.sendChatMessage(jTextField1.getText());
      jTextField1.setText("");
   }//GEN-LAST:event_sendButtonActionPerformed

   private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
      // TODO add your handling code here:
      if (jTextField1.getText().isEmpty()) {
         sendButton.doClick();
      }
   }//GEN-LAST:event_jTextField1ActionPerformed

   private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      // TODO add your handling code here:
      networkHandler.disconnectFromServer();
      networkHandler.getThreadPool().shutdown();
      System.exit(0);
   }//GEN-LAST:event_formWindowClosing

   private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
      // TODO add your handling code here:
      gameServer.startGame();
   }//GEN-LAST:event_startButtonActionPerformed

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /*
       * Set the Nimbus look and feel
       */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
       * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see
       * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /*
       * Create and display the form
       */
      java.awt.EventQueue.invokeLater(new Runnable() {

         public void run() {
            new ClientJFrame().setVisible(true);
         }
      });
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton sendButton;
    private javax.swing.JToggleButton startButton;
    // End of variables declaration//GEN-END:variables

   //Attention!! Race Conditions if two Threads at the same Time commit an update of the same Type. Synchronized networkHandler?
   @Override
   public void update(Observable o, Object o1) {
      switch ((UpdateType) o1) {
         case CHAT_MESSAGE_RECEIVED:
            writeToChatArea(networkHandler.getChatMessage().toString());
            break;
         case SESSION_ADDED:
            writeToChatArea(networkHandler.getAddedSession().getNickname() + " enters");
            updatePlayerList(networkHandler.getSessionList());
            break;
         case SESSION_REMOVED:
            writeToChatArea(networkHandler.getRemovedSession().getNickname() + " has left");
            updatePlayerList(networkHandler.getSessionList());
            break;
         case GAME_STARTED:
            writeToChatArea("Game has started");
            SwingUtilities.invokeLater(new Runnable() {

               @Override
               public void run() {
                  startButton.setEnabled(false);
                  sendButton.setEnabled(false);
                  jTextField1.removeAll();
                  jTextField1.addKeyListener(new KeyAdapter() {

                     @Override
                     public void keyPressed(java.awt.event.KeyEvent e) {
                        jTextField1.setText("");

                        inputSampler.dispatchKeyEvent(e);
                     }
                  });
               }
            });
            stepGenerator = new StepGenerator(inputSampler, ownSession.getId());
            stepGenerator.addObserver(this);

            Timer timer = new Timer();

            TimerTask timerTask = new TimerTask() {

               @Override
               public void run() {
                  stepGenerator.runStep();
               }
            };
            
            timer.scheduleAtFixedRate(timerTask, 0, 50);
            break;


         case STEP:

            StepProducerInterface stepProducer = (StepProducerInterface) o;
            if (o instanceof StepGenerator) {
               networkHandler.addStep(stepProducer.getStep());
            }
            Step step = stepProducer.getStep();
            writeToChatArea("Step received from " + step.getSessionID());
            for (Action action : step.getActions()) {
               writeToChatArea('\t' + action.getTimestamp() + " " + action.getType().name());
            }
            break;
         case EXCEPTION_THROWN:
            break;
      }
   }

   private void writeToChatArea(String message) {
      chatArea.append(message + '\n');
   }

   private void updatePlayerList(final List<SessionInformation> newSessionList) {
      SwingUtilities.invokeLater(new Runnable() {

         @Override
         public void run() {
            model.clear();
            for (SessionInformation session : newSessionList) {
               model.addElement(session.getNickname());
            }
         }
      });
   }
}
